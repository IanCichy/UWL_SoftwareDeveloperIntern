using FDS;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Web.Script.Services;
using System.Web.Services;
using System.Windows.Forms;

/// <summary>
/// Provides access for Javascript AJAX requests to get statistics for use on /Stats.aspx
/// </summary>
[WebService(Namespace = "http://reslife.uwlax.edu/dcweb")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
[ScriptService]
public class Data : System.Web.Services.WebService
{
    public Data()
    {
    }

    private string CreatePieChartJSONObject(string label, int value, Color color)
    {
        return "{ \"value\": " + value + ", \"label\": \"" + label + "\", \"color\": \"" + ColorTranslator.ToHtml(color) + "\", \"highlight\": \"" + ColorTranslator.ToHtml(ControlPaint.Light(color)) + "\" }";
    }

    // Build a dictionary, then sort it into a list, then pass it in to this
    private string DictToLineJSON(List<KeyValuePair<string, int>> data, string label)
    {
        var keys = from d in data select d.Key;
        var values = from d in data select d.Value;
        var labelsString = "\"" + string.Join("\", \"", keys) + "\"";
        var dataString = "\"" + string.Join("\", \"", values) + "\"";
        var json = string.Format(
@"{{
    ""labels"": [{0}],
    ""datasets"": [
        {{
            ""label"": ""{1}"",
            ""fillColor"": ""rgba(151,187,205,0.2)"",
            ""strokeColor"": ""rgba(151,187,205,1)"",
            ""pointColor"": ""rgba(151,187,205,1)"",
            ""pointStrokeColor"": ""#fff"",
            ""pointHighlightFill"": ""#fff"",
            ""pointHighlightStroke"": ""rgba(151,187,205,1)"",
            ""data"": [{2}]
        }}
    ]
}}
", labelsString, label, dataString);

        return json;
    }

    // TODO: Only gets labels from first dataset currently
    // TODO: Colors
    private string DictToTwoLineJSON(List<KeyValuePair<string, int>> dataset1, List<KeyValuePair<string, int>> dataset2, string label1, string label2)
    {
        var keys1 = from d in dataset1 select d.Key;
        var values1 = from d in dataset1 select d.Value;
        var labelsString1 = "\"" + string.Join("\", \"", keys1) + "\"";
        var dataString1 = "\"" + string.Join("\", \"", values1) + "\"";
        var keys2 = from d in dataset2 select d.Key;
        var values2 = from d in dataset2 select d.Value;
        var labelsString2 = "\"" + string.Join("\", \"", keys2) + "\"";
        var dataString2 = "\"" + string.Join("\", \"", values2) + "\"";
        var json = string.Format(
@"{{
    ""labels"": [{0}],
    ""datasets"": [
        {{
            ""label"": ""{1}"",
            ""fillColor"": ""rgba(100,100,100,0)"",
            ""strokeColor"": ""rgba(100,100,100,1)"",
            ""pointColor"": ""rgba(100,100,100,1)"",
            ""pointStrokeColor"": ""#fff"",
            ""pointHighlightFill"": ""#fff"",
            ""pointHighlightStroke"": ""rgba(100,100,100,1)"",
            ""data"": [{2}]
        }} ,
        {{
            ""label"": ""{3}"",
            ""fillColor"": ""rgba(151,187,205,0.2)"",
            ""strokeColor"": ""rgba(151,187,205,1)"",
            ""pointColor"": ""rgba(151,187,205,1)"",
            ""pointStrokeColor"": ""#fff"",
            ""pointHighlightFill"": ""#fff"",
            ""pointHighlightStroke"": ""rgba(151,187,205,1)"",
            ""data"": [{4}]
        }}
    ]
}}
", labelsString1, label1, dataString1, label2, dataString2);

        return json;
    }

    private string DictsToLineJSON(Dictionary<int, List<KeyValuePair<string, int>>> dicts)
    {
        if (dicts.Count == 0)
        {
            return "";
        }
        var labelsString = "\"" + string.Join("\", \"", (from d in dicts.First().Value select d.Key)) + "\"";
        List<string> datasetStrings = new List<string>();
        foreach (var kv in dicts)
        {
            Color color = ColorForHall(kv.Key);
            var datastring = "\"" + string.Join("\", \"", (from d in kv.Value select d.Value)) + "\"";
            datasetStrings.Add(string.Format(
@"      {{
            ""label"": ""{0}"",
            ""fillColor"": ""rgba({2},{3},{4},0)"",
            ""strokeColor"": ""rgba({2},{3},{4},1)"",
            ""pointColor"": ""rgba({2},{3},{4},1)"",
            ""pointStrokeColor"": ""#fff"",
            ""pointHighlightFill"": ""#fff"",
            ""pointHighlightStroke"": ""rgba({2},{3},{4},,1)"",
            ""data"": [{1}]
        }}", Hall.GetHallById(kv.Key).Name, datastring, color.R.ToString(), color.G.ToString(), color.B.ToString()));
        }

        var json = string.Format(
@"{{
    ""labels"": [{0}],
    ""datasets"": [
        {1}
    ]
}}
", labelsString, string.Join(",\n", datasetStrings));

        return json;
    }

    private Color ColorForHall(int hallID)
    {
        switch (hallID)
        {
            case 1:
                return ColorTranslator.FromHtml("#F8170C");

            case 2:
                return ColorTranslator.FromHtml("#8C0BF8");

            case 3:
                return ColorTranslator.FromHtml("#429504");

            case 4:
                return ColorTranslator.FromHtml("#0C5375");

            case 5:
                return ColorTranslator.FromHtml("#D79D4A");

            case 6:
                return ColorTranslator.FromHtml("#F86309");

            case 7:
                return ColorTranslator.FromHtml("#2DAEB5");

            case 8:
                return ColorTranslator.FromHtml("#652702");

            case 9:
                return ColorTranslator.FromHtml("#DC3B7B");

            case 10:
                return ColorTranslator.FromHtml("#B8CF9D");

            case 11:
                return ColorTranslator.FromHtml("#BADA55");

            default:
                return ColorTranslator.FromHtml("#000000");
        }
    }

    private string HallName(int hallID)
    {
        if (hallID == -1)
        {
            return "All Halls";
        }
        return Hall.GetHallById(hallID).Name;
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void PizzaDayOfWeekLine(int hallID)
    {
        var data = GetDayOfWeekStats("SELECT * FROM dbo.StatsPizzaWeekDayByHall(@hallID) ORDER BY Count DESC", hallID);

        var response = DictToLineJSON(SortByDay(data), HallName(hallID));

        Context.Response.Write(response);
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void PizzaHourLine(int hallID)
    {
        var data = GetHourOfDayStats("SELECT * FROM dbo.StatsPizzaHourByHall(@hallID) ORDER BY Hour", hallID);

        var response = DictToLineJSON(data.ToList(), HallName(hallID));

        Context.Response.Write(response);
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void PackageDayOfWeekLine(int hallID)
    {
        var data = GetDayOfWeekStats("SELECT * FROM dbo.StatsPackagesWeekDayByHall(@hallID) ORDER BY Count DESC", hallID);

        var response = DictToLineJSON(SortByDay(data), HallName(hallID));

        Context.Response.Write(response);
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void PackageHourLine(int hallID)
    {
        var data = GetHourOfDayStats("SELECT * FROM dbo.StatsPackagesHourByHall(@hallID) ORDER BY Hour", hallID);

        var response = DictToLineJSON(data.ToList(), HallName(hallID));

        Context.Response.Write(response);
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void ProductDayOfWeekLine(int hallID)
    {
        var data = GetDayOfWeekStats("SELECT * FROM [dbo].[StatsProductsWeekDayByHall] (@hallID)", hallID);

        var response = DictToLineJSON(SortByDay(data), HallName(hallID));

        Context.Response.Write(response);
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void ProductHourLine(int hallID)
    {
        var data = GetHourOfDayStats("SELECT * FROM dbo.StatsProductsHourByHall(@hallID) ORDER BY Hour", hallID);

        var response = DictToLineJSON(data.ToList(), HallName(hallID));

        Context.Response.Write(response);
    }

    private Dictionary<string, int> GetDayOfWeekStats(string sql, int hallID)
    {
        var command = new SqlCommand(sql)
        {
            CommandType = System.Data.CommandType.Text,
            Connection = Connections.FDSConnection()
        };

        command.Parameters.Add(new SqlParameter("hallID", hallID));

        command.Connection.Open();
        var reader = command.ExecuteReader();

        var data = new Dictionary<string, int>();

        while (reader.Read())
        {
            var day = reader["Day"].ToString();
            var count = int.Parse(reader["Count"].ToString());
            data.Add(day, count);
        }

        command.Connection.Close();

        return data;
    }

    private Dictionary<string, int> GetHourOfDayStats(string sql, int hallID)
    {
        var command = new SqlCommand(sql)
        {
            CommandType = System.Data.CommandType.Text,
            Connection = Connections.FDSConnection()
        };
        command.Parameters.Add(new SqlParameter("hallID", hallID));

        command.Connection.Open();
        var reader = command.ExecuteReader();

        var data = new Dictionary<string, int>();
        for (int h = 0; h < 24; h++)
        {
            data.Add(h.ToString(), 0);
        }

        while (reader.Read())
        {
            var hour = reader["Hour"].ToString();
            var count = int.Parse(reader["Count"].ToString());
            data[hour] = count;
        }

        command.Connection.Close();

        return data;
    }

    private List<KeyValuePair<string, int>> SortByDay(Dictionary<string, int> data)
    {
        var dayNames = Array.ConvertAll(CultureInfo.CurrentCulture.DateTimeFormat.DayNames, d => d.ToUpperInvariant());
        return data.ToList().OrderBy(kv => (Array.IndexOf(dayNames, kv.Key.ToUpper()) + 6) % 7).ToList();
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void PizzaDayOfWeekLineComparison(int hallID)
    {
        var data1 = GetDayOfWeekStats("SELECT * FROM dbo.StatsPizzaWeekDayByHall(@hallID) ORDER BY Count DESC", hallID);
        var data2 = GetDayOfWeekStats("SELECT * FROM dbo.StatsPizzaWeekDayAverage() ORDER BY Count DESC", -1);
        var response = DictToTwoLineJSON(SortByDay(data2), SortByDay(data1), "Average", HallName(hallID));

        Context.Response.Write(response);
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void PizzaHourLineComparison(int hallID)
    {
        var data1 = GetHourOfDayStats("SELECT * FROM dbo.StatsPizzaHourByHall(@hallID) ORDER BY Hour", hallID);
        var data2 = GetHourOfDayStats("SELECT * FROM dbo.StatsPizzaHourAverage() ORDER BY Hour", -1);

        var response = DictToTwoLineJSON(data2.ToList(), data1.ToList(), "Average", HallName(hallID));

        Context.Response.Write(response);
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void PackageDayOfWeekLineComparison(int hallID)
    {
        var data1 = GetDayOfWeekStats("SELECT * FROM dbo.StatsPackagesWeekDayByHall(@hallID) ORDER BY Count DESC", hallID);
        var data2 = GetDayOfWeekStats("SELECT * FROM dbo.StatsPackagesWeekDayAverage() ORDER BY Count DESC", -1);

        var response = DictToTwoLineJSON(SortByDay(data2), SortByDay(data1), "Average", HallName(hallID));

        Context.Response.Write(response);
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void PackageHourLineComparison(int hallID)
    {
        var data1 = GetHourOfDayStats("SELECT * FROM dbo.StatsPackagesHourByHall(@hallID) ORDER BY Hour", hallID);
        var data2 = GetHourOfDayStats("SELECT * FROM dbo.StatsPackagesHourAverage() ORDER BY Hour", -1);

        var response = DictToTwoLineJSON(data2.ToList(), data1.ToList(), "Average", HallName(hallID));

        Context.Response.Write(response);
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void PizzaDayOfWeekLineAll()
    {
        Dictionary<int, List<KeyValuePair<string, int>>> data = new Dictionary<int, List<KeyValuePair<string, int>>>();
        for (int hallID = 1; hallID <= 10; hallID++)
        {
            data.Add(hallID, SortByDay(GetDayOfWeekStats("SELECT * FROM dbo.StatsPizzaWeekDayByHall(@hallID) ORDER BY Count DESC", hallID)));
        }
        var response = DictsToLineJSON(data);

        Context.Response.Write(response);
    }

    [WebMethod]
    [ScriptMethod(ResponseFormat = ResponseFormat.Json, UseHttpGet = false)]
    public void DVDCheckOutDayOfWeekLine(int hallID)
    {
        var data = GetDayOfWeekStats("SELECT * FROM [dbo].[StatsDVDCheckOutWeekDayByHall](@hallID) ORDER BY Count DESC", hallID);
        var response = DictToLineJSON(SortByDay(data), HallName(hallID));
        Context.Response.Write(response);
    }
}